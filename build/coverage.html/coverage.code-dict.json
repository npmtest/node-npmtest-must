{"/home/travis/build/npmtest/node-npmtest-must/test.js":"/* istanbul instrument in package npmtest_must */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-must/lib.npmtest_must.js":"/* istanbul instrument in package npmtest_must */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_must = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_must = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-must/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-must && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_must */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_must\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_must.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_must.rollup.js'] =\n            local.assetsDict['/assets.npmtest_must.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_must.__dirname +\n                    '/lib.npmtest_must.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-must/node_modules/must/register.js":"var Must = module.exports = require(\"./must\")\n/* eslint no-extend-native: 0 */\n\n/**\n * Creates an instance of [`Must`](#Must) with the current object for asserting\n * and calling matchers on.\n *\n * This property is non-enumerable just like built-in properties, so\n * it'll never interfere with any regular usage of objects.\n *\n * Please note that JavaScript does not allow method calls on `null` or\n * `undefined`, so you'll sometimes have to call [`Must`](#Must) on them by\n * hand.  Assigning `require(\"must\")` to `expect` or `demand` works well with\n * those cases.\n *\n * @example\n * true.must.be.true()\n * [].must.be.empty()\n *\n * @property must\n * @for Object\n * @on prototype\n */\nObject.defineProperty(Object.prototype, \"must\", {\n  get: function() { \"use strict\"; return new Must(this) },\n\n  set: function(value) {\n    Object.defineProperty(this, \"must\", {\n      value: value,\n      configurable: true,\n      enumrable: true,\n      writable: true\n    })\n  },\n\n  // Without configurable, can't redefine it when reloading this file, e.g.\n  configurable: true\n})\n","/home/travis/build/npmtest/node-npmtest-must/node_modules/must/must.js":"var O = require(\"oolong\")\nvar AssertionError = require(\"./lib/assertion_error\")\nvar Resolvable = require(\"./lib/resolvable\")\nvar Rejectable = require(\"./lib/rejectable\")\nvar kindof = require(\"kindof\")\nvar egal = require(\"egal\")\nvar deepEgal = egal.deepEgal\nvar stringify = require(\"./lib\").stringify\nvar chain = require(\"./lib\").chain\nvar defineGetter = O.defineGetter\nvar lookupGetter = O.lookupGetter\nvar startsWith = require(\"./lib/es6\").startsWith\nvar endsWith = require(\"./lib/es6\").endsWith\nvar hasOwn = Function.call.bind(Object.hasOwnProperty)\nvar ANY = {}\nexports = module.exports = Must\nexports.AssertionError = AssertionError\nexports.stringify = stringify\nexports.chain = chain\n\n/**\n * The main class that wraps the asserted object and that you call matchers on.\n *\n * To include a custom error message for failure cases, pass a string as the\n * second argument.\n *\n * Most of the time you'll be using\n * [`Object.prototype.must`](#Object.prototype.must) to create this wrapper, but\n * occasionally you might want to assert `null`s or `undefined`s and in those\n * cases assigning `Must` to something like `expect` or `demand` works nicely.\n *\n * @example\n * true.must.be.true()\n * [].must.be.empty()\n *\n * var expect = require(\"must\")\n * expect(null).to.be.null()\n *\n * var demand = require(\"must\")\n * demand(undefined, \"The undefined undefineds\").be.undefined()\n *\n * @class Must\n * @constructor\n * @param actual\n * @param [message]\n */\nfunction Must(actual, message) {\n  if (!(this instanceof Must)) return new Must(actual, message)\n  this.actual = actual\n  if (message != null) this.message = message\n}\n\n/**\n  * Can also be used a pass-through property for a fluent chain.\n  *\n  * @example\n  * \"Hello\".must.be.a.string()\n  * new Date().must.be.a(Date)\n  *\n  * @method a\n  * @alias instanceof\n  */\ndefineGetter(Must.prototype, \"a\", function() {\n  return chain(this, this.instanceof)\n})\n\n/**\n  * Can also be used a pass-through property for a fluent chain.\n  *\n  * @example\n  * [1, 2].must.be.an.array()\n  * new AwesomeClass().must.be.an(AwesomeClass)\n  *\n  * @method an\n  * @alias instanceof\n  */\ndefineGetter(Must.prototype, \"an\", lookupGetter(Must.prototype, \"a\"))\n\n/**\n  * Pass-through property for a fluent chain.\n  *\n  * @example\n  * (42).must.be.at.most(69)\n  * (1337).must.be.at.least(1337)\n  *\n  * @property at\n  * @on prototype\n  */\ndefineGetter(Must.prototype, \"at\", passthrough)\n\n/**\n  * Can also be used as a pass-through property for a fluent chain.\n  *\n  * @example\n  * true.must.be.true()\n  * (42).must.be(42)\n  *\n  * @method be\n  * @alias equal\n  */\ndefineGetter(Must.prototype, \"be\", function() {\n  return chain(this, this.equal)\n})\n\n/**\n  * Pass-through property for a fluent chain.\n  *\n  * @example\n  * [1, 2].must.have.length(2)\n  *\n  * @property have\n  * @on prototype\n  */\ndefineGetter(Must.prototype, \"have\", passthrough)\n\n/**\n  * Inverse the assertion.  \n  * Use it multiple times to create lots of fun!\n  * `true.must.not.not.be.true()` :-)\n  *\n  * @example\n  * true.must.not.be.true()\n  * [].must.not.be.empty()\n  *\n  * @property not\n  * @on prototype\n  */\ndefineGetter(Must.prototype, \"not\", function() {\n  // NOTE: Dear reader or plugin author, please don't depend on this property\n  // name will remain as-is. If you really need to, let me know how you'd like\n  // to use it. XO.\n  var self = Object.create(this)\n  self.negative = !self.negative\n  return self\n})\n\n/**\n  * Pass-through property for a fluent chain.\n  *\n  * @example\n  * var expect = require(\"must\")\n  * expect(true).to.be.true()\n  *\n  * var wish = require(\"must\")\n  * wish(life).to.be.truthy()\n  *\n  * @property to\n  * @on prototype\n  */\ndefineGetter(Must.prototype, \"to\", passthrough)\n\n/**\n * Assert object is `true`.  \n * A boxed boolean object (`new Boolean(true`) is _not_ considered true.\n *\n * @example\n * true.must.be.true()\n *\n * @method true\n */\nMust.prototype.true = function() {\n  this.assert(this.actual === true, \"be\", {expected: true})\n}\n\n/**\n * Assert object is `false`.  \n * A boxed boolean object (`new Boolean(false`) is _not_ considered false.\n *\n * @example\n * false.must.be.false()\n * @method false\n *\n */\nMust.prototype.false = function() {\n  this.assert(this.actual === false, \"be\", {expected: false})\n}\n\n/**\n * Assert object is `NaN`.\n *\n * @example\n * NaN.must.be.nan()\n *\n * @method nan\n */\nMust.prototype.nan = function() {\n  this.assert(this.actual !== this.actual, \"be\", {expected: NaN})\n}\n\n/**\n * Assert object is `null`.\n *\n * Because JavaScript does not allow method calls on `null`, you'll have to\n * wrap an expected null with [`Must`](#Must). Assigning `require(\"must\")` to\n * `expect` or `demand` works well.\n *\n * If you want to assert that an object's property is `null`, see\n * [`property`](#Must.prototype.property).\n *\n * @example\n * var demand = require(\"must\")\n * demand(null).be.null()\n *\n * @method null\n */\nMust.prototype.null = function() {\n  this.assert(this.actual === null, \"be\", {expected: null})\n}\n\n/**\n * Assert object is `undefined`.\n *\n * Because JavaScript does not allow method calls on `undefined`, you'll have to\n * wrap an expected undefined with [`Must`](#Must). Assigning `require(\"must\")`\n * to `expect` or `demand` works well.\n *\n * If you want to assert that an object's property is `undefined`, see\n * [`property`](#Must.prototype.property).\n *\n * @example\n * var demand = require(\"must\")\n * demand(undefined).be.undefined()\n *\n * @method undefined\n */\nMust.prototype.undefined = function() {\n  this.assert(this.actual === undefined, \"be\", {expected: undefined})\n}\n\n/**\n * Assert object is a boolean (`true` or `false`).  \n * Boxed boolean objects (`new Boolean`) are _not_ considered booleans.\n *\n * @example\n * true.must.be.a.boolean()\n *\n * @method boolean\n */\nMust.prototype.boolean = function() {\n  this.assert(typeof this.actual == \"boolean\", \"be a boolean\")\n}\n\n/**\n * Assert object is a number.  \n * Boxed number objects (`new Number`) are _not_ considered numbers.\n *\n * @example\n * (42).must.be.a.number()\n *\n * @method number\n */\nMust.prototype.number = function() {\n  this.assert(typeof this.actual == \"number\", \"be a number\")\n}\n\n/**\n * Assert object is a string.  \n * Boxed string objects (`new String`) are _not_ considered strings.\n *\n * @example\n * \"Hello\".must.be.a.string()\n *\n * @method string\n */\nMust.prototype.string = function() {\n  this.assert(typeof this.actual == \"string\", \"be a string\")\n}\n\n/**\n * Assert object is a symbol.\n *\n * @example\n * Symbol().must.be.a.symbol()\n *\n * @method symbol\n */\nMust.prototype.symbol = function() {\n  this.assert(typeof this.actual == \"symbol\", \"be a symbol\")\n}\n\n/**\n * Assert object is a date.\n *\n * @example\n * new Date().must.be.a.date()\n *\n * @method date\n */\nMust.prototype.date = function() {\n  this.assert(kindof(this.actual) == \"date\", \"be a date\")\n}\n\n/**\n * Assert object is a regular expression.\n *\n * @example\n * /[a-z]/.must.be.a.regexp()\n *\n * @method regexp\n */\nMust.prototype.regexp = function() {\n  this.assert(kindof(this.actual) == \"regexp\", \"be a regular expression\")\n}\n\n/**\n * Assert object is an array.\n *\n * @example\n * [42, 69].must.be.an.array()\n *\n * @method array\n */\nMust.prototype.array = function() {\n  this.assert(Array.isArray(this.actual), \"be an array\")\n}\n\n/**\n * Assert object is a function.\n *\n * @example\n * (function() {}).must.be.a.function()\n *\n * @method function\n */\nMust.prototype.function = function() {\n  this.assert(typeof this.actual == \"function\", \"be a function\")\n}\n\n/**\n * Assert object is an.. object.\n *\n * @example\n * ({}).must.be.an.object()\n *\n * @method object\n */\nMust.prototype.object = function() {\n  var ok = this.actual && typeof this.actual == \"object\"\n  this.assert(ok, \"be an object\")\n}\n\n/**\n * Assert object is truthy (`!!obj`).\n *\n * Only `null`, `undefined`, `0`, `false` and `\"\"` are falsy in JavaScript.\n * Everything else is truthy.\n *\n * @example\n * (42).must.be.truthy()\n * \"Hello\".must.be.truthy()\n *\n * @method truthy\n */\nMust.prototype.truthy = function() {\n  this.assert(this.actual, \"be truthy\")\n}\n\n/**\n * Assert object is falsy (`!obj`).\n *\n * Only `null`, `undefined`, `0`, `false` and `\"\"` are falsy in JavaScript.\n * Everything else is truthy.\n *\n * @example\n * 0.must.be.falsy()\n * \"\".must.be.falsy()\n *\n * @method falsy\n */\nMust.prototype.falsy = function() {\n  this.assert(!this.actual, \"be falsy\")\n}\n\n/**\n * Assert object is exists and thereby is not null or undefined.\n *\n * @example\n * 0.must.exist()\n * \"\".must.exist()\n * ({}).must.exist()\n *\n * @method exist\n */\nMust.prototype.exist = function() {\n  this.assert(this.actual != null, \"exist\")\n}\n\n/**\n * Assert that an object is an instance of something.  \n * Uses `obj instanceof expected`.\n *\n * @example\n * new Date().must.be.an.instanceof(Date)\n *\n * @method instanceof\n * @param class\n */\nMust.prototype.instanceof = function(expected) {\n  var ok = this.actual instanceof expected\n  this.assert(ok, instanceofMessage.bind(this, expected), {expected: expected})\n}\n\nfunction instanceofMessage(expected) {\n  var type = expected.displayName || expected.name || stringify(expected)\n  return \"be an instance of \" + type\n}\n\n/**\n * @method instanceOf\n * @alias instanceof\n */\nMust.prototype.instanceOf = Must.prototype.instanceof\n\n/**\n * Assert that an object is empty.  \n * Checks either the `length` for arrays and strings or the count of\n * enumerable keys. Inherited keys also counted.\n *\n * @example\n * \"\".must.be.empty()\n * [].must.be.empty()\n * ({}).must.be.empty()\n *\n * @method empty\n */\nMust.prototype.empty = function() {\n  var ok = false\n  if (typeof this.actual === \"string\" || Array.isArray(this.actual))\n    ok = this.actual.length === 0\n  else if (typeof this.actual == \"object\" || typeof this.actual == \"function\")\n    ok = O.isEmpty(this.actual)\n\n  this.assert(ok, \"be empty\")\n}\n\n/**\n * Assert a string ends with the given string.\n *\n * @example\n * \"Hello, John\".must.endWith(\"John\")\n *\n * @method endWith\n * @param expected\n */\nMust.prototype.endWith = function(expected) {\n  this.assert(endsWith(this.actual, expected), \"end with\", {expected: expected})\n}\n\n/**\n * Assert object strict equality or identity (`===`).\n *\n * To compare value objects (like `Date` or `RegExp`) by their value rather\n * than identity, use [`eql`](#Must.prototype.eql).  \n * To compare arrays and objects by content, also use\n * [`eql`](#Must.prototype.eql).\n *\n * @example\n * (42).must.equal(42)\n *\n * var date = new Date\n * date.must.equal(date)\n *\n * @method equal\n * @param expected\n */\nMust.prototype.equal = function(expected) {\n  this.assert(this.actual === expected, \"equal\", {expected: expected})\n}\n\n/**\n * Assert that an object is an error (instance of `Error` by default).  \n * Optionally assert it matches `expected` (and/or is of instance\n * `constructor`).  \n * When you have a function that's supposed to throw, use\n * [`throw`](#Must.prototype.throw).\n *\n * Given `expected`, the error is asserted as follows:\n * - A **string** is compared with the exception's `message` property.\n * - A **regular expression** is matched against the exception's `message`\n *   property.\n * - A **function** (a.k.a. constructor) is used to check if the error\n *   is an `instanceof` that constructor.\n * - All other cases of `expected` are left unspecified for now.\n *\n * @example\n * var err = throw new RangeError(\"Everything's amazing and nobody's happy\") }\n * err.must.be.an.error()\n * err.must.be.an.error(\"Everything's amazing and nobody's happy\")\n * err.must.be.an.error(/amazing/)\n * err.must.be.an.error(Error)\n * err.must.be.an.error(RangeError)\n * err.must.be.an.error(RangeError, \"Everything's amazing and nobody's happy\")\n * err.must.be.an.error(RangeError, /amazing/)\n *\n * @method error\n * @param [constructor]\n * @param [expected]\n */\nMust.prototype.error = function(type, expected) {\n  if (arguments.length <= 1) expected = ANY\n  if (arguments.length == 1 && !isFn(type)) { expected = type; type = null }\n\n  var ok = isError(this.actual, type || Error, expected)\n  var msg = expected !== ANY ? \"be an error matching\" : \"be an error\"\n  var opts = expected !== ANY ? {expected: expected} : null\n  this.assert(ok, msg, opts)\n}\n\n/**\n  * Can also be used as a pass-through property for a fluent chain.\n  *\n  * @example\n  * var claim = require(\"must\")\n  * claim(true).is.true()\n  * claim(42).is(42)\n  *\n  * @method is\n  * @alias equal\n  */\ndefineGetter(Must.prototype, \"is\", lookupGetter(Must.prototype, \"be\"))\n\n/**\n * Assert object equality by content and if possible, recursively.  \n * Also handles circular and self-referential objects.\n *\n * For most parts it asserts strict equality (`===`), but:\n * - `RegExp` objects are compared by their pattern and flags.\n * - `Date` objects are compared by their value.\n * - `Array` objects are compared recursively.\n * - `NaN`s are considered equivalent.\n * - Instances of the same class with a `valueOf` function are compared by its\n *   output.\n * - Plain objects and instances of the same class are compared recursively.\n *\n * **Does not coerce types** so **mismatching types fail**.  \n * Inherited enumerable properties are also taken into account.\n *\n * **Instances** are objects whose prototype's `constructor` property is set.\n * E.g. `new MyClass`.  \n * Others, like `{}` or `Object.create({})`, are **plain objects**.\n *\n * @example\n * /[a-z]/.must.eql(/[a-z]/)\n * new Date(1987, 5, 18).must.eql(new Date(1987, 5, 18))\n * [\"Lisp\", 42].must.eql([\"Lisp\", 42])\n * ({life: 42, love: 69}).must.eql({life: 42, love: 69})\n * NaN.must.eql(NaN)\n *\n * function Answer(answer) { this.answer = answer }\n * new Answer(42).must.eql(new Answer(42))\n *\n * @method eql\n * @param expected\n */\nMust.prototype.eql = function(expected) {\n  var ok = deepEgal(this.actual, expected, eql)\n  this.assert(ok, \"be equivalent to\", {expected: expected, diffable: true})\n}\n\n/**\n * Assert object includes `expected`.\n *\n * For strings it checks the text, for arrays it checks elements and for\n * objects the property values. Everything is checked with strict equals\n * (`===`).\n *\n * @example\n * \"Hello, John!\".must.include(\"John\")\n * [1, 42, 3].must.include(42)\n * ({life: 42, love: 69}).must.include(42)\n *\n * @method include\n * @param expected\n */\nMust.prototype.include = function(expected) {\n  var found\n  if (typeof this.actual === \"string\" || Array.isArray(this.actual))\n    found = this.actual.indexOf(expected) >= 0\n  else\n    for (var key in this.actual)\n      if (this.actual[key] === expected) { found = true; break }\n\n  this.assert(found, \"include\", {expected: expected})\n}\n\n/**\n * @method contain\n * @alias include\n */\nMust.prototype.contain = Must.prototype.include\n\n/**\n * Assert that an array is a permutation of the given array.\n *\n * An array is a permutation of another if they both have the same elements\n * (including the same number of duplicates) regardless of their order.\n * Elements are checked with strict equals (`===`).\n *\n * @example\n * [1, 1, 2, 3].must.be.a.permutationOf([3, 2, 1, 1])\n * [7, 8, 8, 9].must.not.be.a.permutationOf([9, 8, 7])\n *\n * @method permutationOf\n * @param expected\n */\nMust.prototype.permutationOf = function(expected) {\n  var ok = isPermutationOf(this.actual, expected)\n  this.assert(ok, \"be a permutation of\", {expected: expected, diffable: true})\n}\n\nfunction isPermutationOf(actual, expected) {\n  if (!Array.isArray(actual) || !Array.isArray(expected)) return false\n  if (actual.length !== expected.length) return false\n\n  actual = actual.slice().sort()\n  expected = expected.slice().sort()\n  for (var i = 0; i < actual.length; i++) {\n    if (actual[i] !== expected[i]) return false\n  }\n\n  return true\n}\n\n/**\n * Assert object matches the given regular expression.\n *\n * If you pass in a non regular expression object, it'll be converted to one\n * via `new RegExp(regexp)`.\n *\n * @example\n * \"Hello, John!\".must.match(/john/i)\n * \"Wei wu wei\".must.match(\"wu\")\n *\n * @method match\n * @param regexp\n */\nMust.prototype.match = function(expected) {\n  var regexp = expected instanceof RegExp ? expected : new RegExp(expected)\n  this.assert(regexp.exec(this.actual), \"match\", {expected: regexp})\n}\n\n/**\n  * Pass-through property for a fluent chain.\n  *\n  * @example\n  * (42).must.must.must.must.equal(42)\n  *\n  * @property must\n  * @on prototype\n  */\ndefineGetter(Must.prototype, \"must\", passthrough)\n\n/**\n  * Pass-through property for a fluent chain.\n  *\n  * @example\n  * (42).must.be.the.number()\n  *\n  * @property the\n  * @on prototype\n  */\ndefineGetter(Must.prototype, \"the\", passthrough)\n\n/**\n * Assert that a function throws.  \n * Optionally assert it throws `expected` (and/or is of instance\n * `constructor`).  \n * When you already have an error reference, use\n * [`error`](#Must.prototype.error).\n *\n * Given `expected`, the error is asserted as follows:\n * - A **string** is compared with the exception's `message` property.\n * - A **regular expression** is matched against the exception's `message`\n *   property.\n * - A **function** (a.k.a. constructor) is used to check if the error\n *   is an `instanceof` that constructor.\n * - All other cases of `expected` are left unspecified for now.\n *\n * Because of how JavaScript works, the function will be called in `null`\n * context (`this`). If you want to test an instance method, bind it:\n * `obj.method.bind(obj).must.throw()`.\n *\n * @example\n * function omg() {\n *   throw new RangeError(\"Everything's amazing and nobody's happy\")\n * }\n *\n * omg.must.throw()\n * omg.must.throw(\"Everything's amazing and nobody's happy\")\n * omg.must.throw(/amazing/)\n * omg.must.throw(Error)\n * omg.must.throw(RangeError)\n * omg.must.throw(RangeError, \"Everything's amazing and nobody's happy\")\n * omg.must.throw(RangeError, /amazing/)\n *\n * @method throw\n * @param [constructor]\n * @param [expected]\n */\nMust.prototype.throw = function(type, expected) {\n  if (arguments.length <= 1) expected = ANY\n  if (arguments.length == 1 && !isFn(type)) { expected = type; type = null }\n\n  var ok = false, exception\n  try { this.actual.call(null) } catch (ex) { ok = true; exception = ex }\n  ok = ok && isError(exception, type, expected)\n\n  var opts = {actual: exception}\n  if (expected !== ANY) opts.expected = expected\n  this.assert(ok, \"throw\", opts)\n}\n\n/**\n * Assert that an object has a length property equal to `expected`.\n *\n * @example\n * \"Something or other\".must.have.length(18)\n * [1, 2, 3, \"Four o'clock rock\"].must.have.length(4)\n *\n * @method length\n * @param expected\n */\nMust.prototype.length = function(expected) {\n  var ok = this.actual.length == expected\n  this.assert(ok, \"have length of\", {expected: expected})\n}\n\n/**\n * Assert that an object is frozen with `Object.isFrozen`.\n *\n * @example\n * Object.freeze({}).must.be.frozen()\n *\n * @method frozen\n */\nMust.prototype.frozen = function() {\n  this.assert(Object.isFrozen(this.actual), \"be frozen\")\n}\n\n/**\n * Assert that an object has all of the properties given in `properties` with\n * equal (`===`) values.  In other words, asserts that the given object is\n * a subset of the one asserted against.\n *\n * Takes **inherited properties** into account. To not do so, see\n * [`ownProperties`](#Must.prototype.ownProperties).\n *\n * @example\n * var john = {name: \"John\", age: 42, sex: \"male\"}\n * john.must.have.properties({name: \"John\", sex: \"male\"})\n *\n * @method properties\n * @param properties\n */\nMust.prototype.properties = function(props) {\n  var obj = this.actual\n  var ok = this.actual != null\n\n  if (ok) for (var key in props) {\n    ok = key in obj && obj[key] === props[key]\n    if (!ok) break\n  }\n\n  this.assert(ok, \"have properties\", {expected: props, diffable: true})\n}\n\n/**\n * Assert that an object has all of the properties given in `properties` with\n * equal (`===`) values and that they're own properties.  In other words,\n * asserts that the given object is a subset of the one asserted against.\n *\n * **Does not** take **inherited properties** into account. To do so, see\n * [`properties`](#Must.prototype.properties).\n *\n * @example\n * var john = {name: \"John\", age: 42, sex: \"male\"}\n * john.must.have.ownProperties({name: \"John\", sex: \"male\"})\n *\n * @method ownProperties\n * @param properties\n */\nMust.prototype.ownProperties = function(props) {\n  var obj = this.actual\n  var ok = this.actual != null\n\n  if (ok) for (var key in props) {\n    ok = key in obj && hasOwn(obj, key) && obj[key] === props[key]\n    if (!ok) break\n  }\n\n  this.assert(ok, \"have own properties\", {expected: props, diffable: true})\n}\n\n/**\n * Assert that an object has property `property`.  \n * Optionally assert it *equals* (`===`) to `value`.\n *\n * Takes **inherited properties** into account. To not do so, see\n * [`ownProperty`](#Must.prototype.ownProperty).\n *\n * @example\n * (function() {}).must.have.property(\"call\")\n * ({life: 42, love: 69}).must.have.property(\"love\", 69)\n *\n * @method property\n * @param property\n * @param [value]\n */\nMust.prototype.property = function(property, expected) {\n  var ok = this.actual != null && property in Object(this.actual)\n  if (ok && arguments.length > 1) ok = this.actual[property] === expected\n\n  var msg = \"have property \\\"\" + property + \"\\\"\", opts\n  if (arguments.length > 1) { msg += \" equal to\"; opts = {expected: expected} }\n  this.assert(ok, msg, opts)\n}\n\n/**\n * Assert that an object has own property `property`.  \n * Optionally assert it *equals* (`===`) to `value`.\n *\n * **Does not** take **inherited properties** into account. To do so, see\n * [`property`](#Must.prototype.property).\n *\n * @example\n * ({life: 42, love: 69}).must.have.ownProperty(\"love\", 69)\n *\n * @method ownProperty\n * @param property\n * @param [value]\n */\nMust.prototype.ownProperty = function(property, expected) {\n  var ok = this.actual != null\n  ok = ok && hasOwn(this.actual, property)\n  if (ok && arguments.length > 1) ok = this.actual[property] === expected\n\n  var msg = \"have own property \\\"\" + property + \"\\\"\", opts\n  if (arguments.length > 1) { msg += \" equal to\"; opts = {expected: expected} }\n  this.assert(ok, msg, opts)\n}\n\n/**\n * @method own\n * @alias ownProperty\n */\nMust.prototype.own = Must.prototype.ownProperty\n\n/**\n * Assert that an object has only the expected enumerable `keys`.  \n * Pass an array of strings as `keys`.\n *\n * Takes **inherited properties** into account. To not do so, see\n * [`ownKeys`](#Must.prototype.ownKeys).\n *\n * @example\n * ({life: 42, love: 69}).must.have.keys([\"life\", \"love\"])\n * Object.create({life: 42}).must.have.keys([\"life\"])\n *\n * @method keys\n * @param keys\n */\nMust.prototype.keys = function(expected) {\n  var ok = this.actual != null\n  ok = ok && isPermutationOf(O.keys(Object(this.actual)), expected)\n  this.assert(ok, \"have keys\", {expected: expected})\n}\n\n/**\n * Assert that an object has only the expected enumerable `keys` of its own.  \n * Pass an array of strings as `keys`.\n *\n * **Does not** take **inherited properties** into account. To do so, see\n * [`keys`](#Must.prototype.keys).\n *\n * @example\n * ({life: 42, love: 69}).must.have.ownKeys([\"life\", \"love\"])\n *\n * @method ownKeys\n * @param keys\n */\nMust.prototype.ownKeys = function(expected) {\n  var ok = this.actual != null\n  ok = ok && isPermutationOf(Object.keys(Object(this.actual)), expected)\n  this.assert(ok, \"have own keys\", {expected: expected})\n}\n\n/**\n * Assert that an object has an enumerable property `property`.  \n * It will fail if the object lacks the property entirely.\n *\n * This also checks inherited properties in the prototype chain, something which\n * `Object.prototype.propertyIsEnumerable` itself does not do.\n *\n * For checking if a property exists *and* is non-enumerable, see\n * [`nonenumerable`](#Must.prototype.nonenumerable).\n *\n * @example\n * ({life: 42, love: 69}).must.have.enumerable(\"love\")\n *\n * @method enumerable\n * @param property\n */\nMust.prototype.enumerable = function(property) {\n  var ok = this.actual != null\n  ok = ok && isEnumerable(Object(this.actual), property)\n  this.assert(ok, \"have enumerable property \\\"\" + property + \"\\\"\")\n}\n\n/**\n * @method enumerableProperty\n * @alias enumerable\n */\nMust.prototype.enumerableProperty = Must.prototype.enumerable\n\n/**\n * Assert that an object has a non-enumerable property `property`.  \n * It will fail if the object lacks the property entirely.\n *\n * This also checks inherited properties in the prototype chain, something which\n * `Object.prototype.propertyIsEnumerable` itself does not do.\n *\n * It's the inverse of [`enumerable`](#Must.prototype.enumerable).\n *\n * @example\n * (function() {}).must.have.nonenumerable(\"call\")\n * Object.create({}, {love: {enumerable: 0}}).must.have.nonenumerable(\"love\")\n *\n * @method nonenumerable\n * @param property\n */\nMust.prototype.nonenumerable = function(property) {\n  var ok = this.actual != null\n  ok = ok && property in Object(this.actual)\n  ok = ok && !isEnumerable(Object(this.actual), property)\n  this.assert(ok, \"have nonenumerable property \\\"\" + property + \"\\\"\")\n}\n\nfunction isEnumerable(obj, name) {\n  // Using propertyIsEnumerable saves a possible looping of all keys.\n  if (Object.prototype.propertyIsEnumerable.call(obj, name)) return true\n  for (var key in obj) if (key == name) return true\n  return false\n}\n\n/**\n * @method nonenumerableProperty\n * @alias nonenumerable\n */\nMust.prototype.nonenumerableProperty = Must.prototype.nonenumerable\n\n/**\n * Assert that an object is below and less than (`<`) `expected`.  \n * Uses `<` for comparison, so it'll also work with value objects (those\n * implementing [`valueOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)) like `Date`.\n *\n * @example\n * (42).must.be.below(69)\n *\n * @method below\n * @param expected\n */\nMust.prototype.below = function(expected) {\n  this.assert(this.actual < expected, \"be below\", {expected: expected})\n}\n\n/**\n * @method lt\n * @alias below\n */\nMust.prototype.lt = Must.prototype.below\n\n/**\n * Works well with dates where saying *before* is more natural than *below* or\n * *less than*.\n *\n * To assert that a date is equivalent to another date, use\n * [`eql`](#Must.prototype.eql). For regular numbers,\n * [`equal`](#Must.prototype.equal) is fine.\n *\n * @example\n * (42).must.be.before(1337)\n * new Date(2000, 5, 18).must.be.before(new Date(2001, 0, 1))\n *\n * @method before\n * @alias below\n */\nMust.prototype.before = Must.prototype.below\n\n/**\n * Assert that an object is at most, less than or equal to (`<=`), `expected`.  \n * Uses `<=` for comparison, so it'll also work with value objects (those\n * implementing [`valueOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)) like `Date`.\n *\n * @example\n * (42).must.be.at.most(69)\n * (42).must.be.at.most(42)\n *\n * @method most\n * @param expected\n */\nMust.prototype.most = function(expected) {\n  this.assert(this.actual <= expected, \"be at most\", {expected: expected})\n}\n\n/**\n * @method lte\n * @alias most\n */\nMust.prototype.lte = Must.prototype.most\n\n/**\n * Assert that an object is above and greater than (`>`) `expected`.  \n * Uses `>` for comparison, so it'll also work with value objects (those\n * implementing [`valueOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)) like `Date`.\n *\n * @example\n * (69).must.be.above(42)\n *\n * @method above\n * @param expected\n */\nMust.prototype.above = function(expected) {\n  this.assert(this.actual > expected, \"be above\", {expected: expected})\n}\n\n/**\n * @method gt\n * @alias above\n */\nMust.prototype.gt = Must.prototype.above\n\n/**\n * Works well with dates where saying *after* is more natural than *above* or\n * *greater than*.\n *\n * To assert that a date is equivalent to another date, use\n * [`eql`](#Must.prototype.eql). For regular numbers,\n * [`equal`](#Must.prototype.equal) is fine.\n *\n * @example\n * (1337).must.be.after(42)\n * new Date(2030, 5, 18).must.be.after(new Date(2013, 9, 23))\n *\n * @method after\n * @alias above\n */\nMust.prototype.after = Must.prototype.above\n\n/**\n * Assert that an object is at least, greater than or equal to (`>=`),\n * `expected`.  \n * Uses `>=` for comparison, so it'll also work with value objects (those\n * implementing [`valueOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)) like `Date`.\n *\n * @example\n * (69).must.be.at.least(42)\n * (42).must.be.at.least(42)\n *\n * @method least\n * @param expected\n */\nMust.prototype.least = function(expected) {\n  this.assert(this.actual >= expected, \"be at least\", {expected: expected})\n}\n\n/**\n * @method gte\n * @alias least\n */\nMust.prototype.gte = Must.prototype.least\n\n/**\n * Assert that an object is between `begin` and `end` (inclusive).  \n * Uses `<` for comparison, so it'll also work with value objects (those\n * implementing [`valueOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf)) like `Date`.\n *\n * @example\n * (13).must.be.between(13, 69)\n * (42).must.be.between(13, 69)\n * (69).must.be.between(13, 69)\n *\n * @method between\n * @param begin\n * @param end\n */\nMust.prototype.between = function(begin, end) {\n  this.assert(begin <= this.actual && this.actual <= end, function() {\n    return \"be between \" + stringify(begin) + \" and \" + stringify(end)\n  })\n}\n/**\n * Makes any matcher following the use of `resolve` wait till a promise\n * resolves before asserting.  \n * Returns a new promise that will either resolve if the assertion passed or\n * fail with `AssertionError`.\n *\n * Promises are transparent to matchers, so everything will also work with\n * customer matchers you've added to `Must.prototype`. Internally Must just\n * waits on the promise and calls the matcher function once it's resolved.\n *\n * With [Mocha](http://mochajs.org), using this will look something like:\n *\n * ```javascript\n * it(\"must pass\", function() {\n *   return Promise.resolve(42).must.resolve.to.equal(42)\n * })\n * ```\n *\n * Using [CoMocha](https://github.com/blakeembrey/co-mocha), it'll look like:\n * ```javascript\n * it(\"must pass\", function*() {\n *   yield Promise.resolve(42).must.resolve.to.equal(42)\n *   yield Promise.resolve([1, 2, 3]).must.resolve.to.not.include(42)\n * })\n * ```\n *\n * @example\n * Promise.resolve(42).must.resolve.to.equal(42)\n * Promise.resolve([1, 2, 3]).must.resolve.to.not.include(42)\n *\n * @property resolve\n * @on prototype\n */\ndefineGetter(Must.prototype, \"resolve\", function() {\n  return Resolvable(this)\n})\n\n/**\n * @example\n * Promise.resolve(42).must.then.equal(42)\n *\n * @property then\n * @on prototype\n * @alias resolve\n */\ndefineGetter(Must.prototype, \"then\", lookupGetter(Must.prototype, \"resolve\"))\n\n/**\n * @example\n * Promise.resolve(42).must.eventually.equal(42)\n *\n * @property eventually\n * @on prototype\n * @alias resolve\n */\ndefineGetter(Must.prototype, \"eventually\",\n             lookupGetter(Must.prototype, \"resolve\"))\n\n/**\n * Makes any matcher following the use of `reject` wait till a promise\n * is rejected before asserting.  \n * Returns a new promise that will either resolve if the assertion passed or\n * fail with `AssertionError`.\n *\n * Promises are transparent to matchers, so everything will also work with\n * customer matchers you've added to `Must.prototype`. Internally Must just\n * waits on the promise and calls the matcher function once it's rejected.\n *\n * With [Mocha](http://mochajs.org), using this will look something like:\n *\n * ```javascript\n * it(\"must pass\", function() {\n *   return Promise.reject(42).must.reject.to.equal(42)\n * })\n * ```\n *\n * Using [CoMocha](https://github.com/blakeembrey/co-mocha), it'll look like:\n * ```javascript\n * it(\"must pass\", function*() {\n *   yield Promise.reject(42).must.reject.to.equal(42)\n *   yield Promise.reject([1, 2, 3]).must.reject.to.not.include(42)\n * })\n * ```\n *\n * @example\n * Promise.reject(42).must.reject.to.equal(42)\n * Promise.reject([1, 2, 3]).must.reject.to.not.include(42)\n *\n * @property reject\n * @on prototype\n */\ndefineGetter(Must.prototype, \"reject\", function() {\n  return Rejectable(this)\n})\n\n/**\n * Assert a string starts with the given string.\n *\n * @example\n * \"Hello, John\".must.startWith(\"Hello\")\n *\n * @method startWith\n * @param expected\n */\nMust.prototype.startWith = function(expected) {\n  var ok = startsWith(this.actual, expected)\n  this.assert(ok, \"start with\", {expected: expected})\n}\n\n/**\n  * Pass-through property for a fluent chain.\n  *\n  * @example\n  * Promise.resolve(42).must.resolve.with.number()\n  *\n  * @property with\n  * @on prototype\n  */\ndefineGetter(Must.prototype, \"with\", passthrough)\n\nMust.prototype.assert = function assert(ok, message, opts) {\n  if (!this.negative ? ok : !ok) return\n\n  opts = opts ? Object.create(opts) : {}\n  if (!(\"actual\" in opts)) opts.actual = this.actual\n\n  if (!(\"caller\" in opts)) {\n    // Accessing caller in strict mode throws TypeError.\n    try { opts.caller = assert.caller }\n    catch (ex) { opts.caller = assert }\n  }\n\n  var msg = stringify(this.actual) + \" must \" + (this.negative ? \"not \" : \"\")\n  if (typeof message == \"function\") msg += message.call(this)\n  else msg += message + (\"expected\" in opts ? \" \"+stringify(opts.expected) : \"\")\n  if (this.message != null) msg = this.message + \": \" + msg\n\n  throw new AssertionError(msg, opts)\n}\n\nObject.defineProperty(Must.prototype, \"assert\", {enumerable: false})\n\nfunction eql(a, b) {\n  if (egal(a, b)) return true\n\n  var type = kindofPlain(a)\n  if (type !== kindofPlain(b)) return false\n  if (isNumber(a) && isNumber(b) && isNaN(+a) && isNaN(+b)) return true\n\n  switch (type) {\n    case \"array\":\n    case \"plain\":\n      return null\n\n    case \"object\":\n      if (getConstructorOf(a) !== getConstructorOf(b)) return false\n      if (hasValueOf(a) && hasValueOf(b)) return false\n      return null\n\n    default: return false\n  }\n}\n\nfunction getConstructorOf(obj) {\n  var prototype = Object.getPrototypeOf(obj)\n  return prototype === null ? undefined : prototype.constructor\n}\n\nfunction hasValueOf(obj) {\n  var valueOf = obj.valueOf\n  return typeof valueOf === \"function\" && valueOf !== Object.prototype.valueOf\n}\n\nfunction kindofPlain(obj) {\n  var type = kindof(obj)\n  if (type === \"object\" && O.isPlainObject(obj)) return \"plain\"\n  return type\n}\n\nfunction isError(err, constructor, expected) {\n  if (constructor != null && !(err instanceof constructor)) return false\n  if (expected === ANY) return true\n\n  switch (kindof(expected)) {\n    case \"string\": return messageFromError(err) === expected\n    case \"regexp\": return expected.exec(messageFromError(err))\n    default: return err === expected\n  }\n}\n\nfunction messageFromError(err) {\n  // The message in new Error(message) gets converted to a string.\n  return err == null || typeof err == \"string\" ? err : err.message\n}\n\nfunction isFn(fn) { return typeof fn === \"function\" }\nfunction isNumber(n) { return typeof n === \"number\" || n instanceof Number }\nfunction passthrough() { return this }\n","/home/travis/build/npmtest/node-npmtest-must/node_modules/must/lib/assertion_error.js":"var O = require(\"oolong\")\nvar FIRST_LINE = /^.*$/m\nmodule.exports = AssertionError\n\n/**\n * Error object thrown when an assertion fails.\n *\n * @class AssertionError\n * @constructor\n * @param message\n * @param [options]\n */\nfunction AssertionError(msg, opts) {\n  this.message = msg\n\n  /**\n   * The asserted object.\n   *\n   * @property actual\n   */\n  if (opts && \"actual\" in opts) this.actual = opts.actual\n\n  /**\n   * If the matcher took an argument or asserted against something (like\n   * `foo.must.be.true()`), then this is the expected value.\n   *\n   * @property expected\n   */\n  if (opts && \"expected\" in opts) this.expected = opts.expected\n\n  /**\n   * Whether it makes sense to compare objects granularly or even show a diff\n   * view of the objects involved.  \n   *\n   * Most matchers (e.g. [`empty`](#Must.prototype.empty) and\n   * [`string`](#Must.prototype.string)) are concrete, strict and atomic and\n   * don't lend themselves to be compared property by property.  Others however,\n   * like [`eql`](#Must.prototype.eql), are more granular and comparing them\n   * line by line helps understand how they differ.\n   *\n   * @property diffable\n   */\n  if (opts && \"diffable\" in opts) this.diffable = opts.diffable\n\n  /**\n   * The stack trace starting from the code that called `must`.\n   *\n   * @property stack\n   */\n  if (opts && opts.stack != null) Object.defineProperty(this, \"stack\", {\n    value: opts.stack.replace(FIRST_LINE, this),\n    configurable: true, writable: true\n  })\n  else if (Error.captureStackTrace)\n    Error.captureStackTrace(this, opts && opts.caller || this.constructor)\n}\n\nAssertionError.prototype = Object.create(Error.prototype, {\n  constructor: {value: AssertionError, configurable: true, writable: true}\n})\n\nAssertionError.prototype.name = \"AssertionError\"\n\n/**\n * Some test runners (like [Mocha](http://visionmedia.github.io/mocha/)) expect\n * this property instead.\n *\n * @property showDiff\n * @alias diffable\n */\nO.defineGetter(AssertionError.prototype, \"showDiff\", function() {\n  return this.diffable\n})\n","/home/travis/build/npmtest/node-npmtest-must/node_modules/must/lib/resolvable.js":"var Thenable = require(\"./thenable\")\n\nmodule.exports = function(must) {\n  return Thenable(must, promisify)\n}\n\nfunction promisify(fn) {\n  return function matcher() {\n    var must = Object.create(this)\n    if (Error.captureStackTrace) Error.captureStackTrace(must, matcher)\n    return this.actual.then(Thenable.prototype.then.bind(must, fn, arguments))\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-must/node_modules/must/lib/thenable.js":"var wrap = require(\"lodash.wrap\")\nvar lookupGetter = require(\"oolong\").lookupGetter\n\nexports = module.exports = function(must, promisify) {\n  must = Object.create(must)\n\n  for (var name in must)\n    if (hasFunction(must, name)) must[name] = promisify(must[name])\n\n  Object.defineProperty(must, \"assert\", {\n    value: wrap(must.assert, exports.prototype.assert),\n    configurable: true, writable: true\n  })\n\n  return must\n}\n\nexports.prototype.assert = function assert(orig, ok, msg, opts) {\n  opts = opts ? Object.create(opts) : {}\n  if (\"stack\" in this) opts.stack = this.stack\n  orig.call(this, ok, msg, opts)\n}\n\nexports.prototype.then = function(fn, args, actual) {\n  this.actual = actual\n  fn.apply(this, args)\n}\n\nfunction hasFunction(obj, name) {\n  return !lookupGetter(obj, name) && typeof obj[name] == \"function\"\n}\n","/home/travis/build/npmtest/node-npmtest-must/node_modules/must/lib/rejectable.js":"var AssertionError = require(\"./assertion_error\")\nvar Thenable = require(\"./thenable\")\nvar then = Thenable.prototype.then\n\nmodule.exports = function(must) {\n  return Thenable(must, promisify)\n}\n\nfunction promisify(fn) {\n  return function matcher() {\n    var must = Object.create(this)\n    if (Error.captureStackTrace) Error.captureStackTrace(must, matcher)\n    return this.actual.then(raise, then.bind(must, fn, arguments))\n  }\n}\n\nfunction raise() { throw new AssertionError(\"Resolved\") }\n","/home/travis/build/npmtest/node-npmtest-must/node_modules/must/lib/index.js":"var kindof = require(\"kindof\")\nvar jsonify = require(\"json-stringify-safe\")\nvar setPrototypeOf = require(\"./es6\").setPrototypeOf\nvar INDENT = null\n\nexports.chain = function(self, fn) {\n  if (typeof fn != \"function\") throw new TypeError(\"Not a function: \" + fn)\n\n  // Don't set toString as it seems to break \"source-map-support\". This is\n  // a function with an Object prototype, after all.\n  return Object.defineProperties(setPrototypeOf(fn.bind(self), self), {\n    bind: {value: Function.prototype.apply, configurable: true, writable: true},\n    call: {value: Function.prototype.apply, configurable: true, writable: true},\n    apply: {value: Function.prototype.apply, configurable: true, writable: true}\n  })\n}\n\nexports.stringify = function stringify(obj) {\n  var root = obj\n\n  switch (kindof(obj)) {\n    // Allow falling through:\n    /* jshint -W086 */\n    /* eslint no-fallthrough: 0 */\n    case \"null\": return \"null\"\n    case \"undefined\": return \"undefined\"\n    case \"number\": return obj.toString()\n    case \"string\": return JSON.stringify(obj)\n    case \"symbol\": return obj.toString()\n    case \"regexp\": return obj.toString()\n    case \"date\": return obj.toISOString()\n    case \"function\": return obj.toString()\n\n    case \"object\":\n      obj = clone(obj)\n      if (root instanceof Error) obj.message = root.message\n      // Fall through.\n\n    default: return jsonify(obj, stringifyValue, INDENT)\n  }\n}\n\nfunction clone(obj) {\n  var clone = {}, value\n  for (var key in obj) clone[key] = (value = obj[key]) === obj ? clone : value\n  return clone\n}\n\nfunction stringifyValue(key, value) {\n  switch (kindof(value)) {\n    case \"undefined\": return \"[Undefined]\"\n    case \"number\": return isNaN(value) ? \"[NaN]\" : value\n    case \"symbol\": return value.toString()\n    case \"regexp\": return value.toString()\n    default: return value\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-must/node_modules/must/lib/es6.js":"exports.setPrototypeOf = Object.setPrototypeOf || function(obj, prototype) {\n  /* eslint no-proto: 0 */\n  obj.__proto__ = prototype\n  return obj\n}\n\nexports.startsWith = String.prototype.startsWith ?\n  Function.call.bind(String.prototype.startsWith) :\n  function(haystack, needle) {\n  return haystack.lastIndexOf(needle, 0) === 0\n}\n\nexports.endsWith = String.prototype.endsWith ?\n  Function.call.bind(String.prototype.endsWith) :\n  function(haystack, needle) {\n  return haystack.indexOf(needle, haystack.length - needle.length) >= 0\n}\n"}